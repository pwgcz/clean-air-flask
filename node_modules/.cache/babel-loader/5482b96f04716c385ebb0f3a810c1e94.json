{"ast":null,"code":"var _jsxFileName = \"/home/pawel/PycharmProjects/clear-air/src/components/MeasuringData.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Line, ReferenceArea, LabelList, Bar, BarChart, AreaChart, Area, Tooltip, CartesianGrid, XAxis, YAxis, ReferenceLine } from 'recharts';\nexport const MeasuringData = ({\n  stand\n}) => {\n  const [data, setData] = useState([]);\n  const [quality, setQuality] = useState('');\n  let arrData = [];\n  let arrQuality = [];\n  let tempArrData = Array(5).fill(1);\n  useEffect(() => {\n    axios.get(`/measuring-data/${stand.id}`).then(res => {\n      setData(res.data.slice(14, 39));\n    });\n    axios.get(`/quality-index/${stand.index_id}`).then(res => {\n      setQuality(res.data);\n    });\n  }, [stand.id, stand.index_id]);\n\n  const dataFacroty = arr => {\n    return {\n      very_good: arr[0],\n      good: arr[1],\n      moderate: arr[2],\n      sufficient: arr[3],\n      bad: arr[4]\n    };\n  };\n\n  if (quality !== '') {\n    arrQuality = [0, quality.very_good, quality.good, quality.moderate, quality.sufficient, quality.bad];\n    arrData = data.map(dataItem => {\n      return dataFacroty(tempArrData.map((item, i) => {\n        if (dataItem.value >= arrQuality[i + 1]) {\n          return arrQuality[i + 1] - arrQuality[i];\n        } else if (dataItem.value >= arrQuality[i] && dataItem.value <= arrQuality[i + 1]) {\n          return dataItem.value - arrQuality[i];\n        } else {\n          return 0;\n        }\n      }));\n    });\n  }\n\n  const barData = data.map((item, i) => {\n    return Object.assign(item, arrData[i]);\n  });\n\n  const formatXAxis = tickItem => {\n    return tickItem.split('T', 2)[1];\n  };\n\n  console.log(data);\n  data.value = arrData;\n  return /*#__PURE__*/React.createElement(BarChart, {\n    width: 750,\n    height: 300,\n    data: barData,\n    className: \"chart-wrapper\",\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"very_good\",\n    fill: \"green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"good\",\n    fill: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"moderate\",\n    fill: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"sufficient\",\n    fill: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"bad\",\n    fill: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: \"pv\",\n    fill: \"#8884d8\",\n    stackId: \"stack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"1 1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    height: 100,\n    dataKey: \"date\",\n    interval: 0,\n    angle: 30,\n    label: \"Time[h]\",\n    tickFormatter: formatXAxis,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"value\",\n    label: {\n      value: stand.code + '[ug/m3]',\n      angle: -90\n    },\n    width: 110,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, quality.name));\n};","map":{"version":3,"sources":["/home/pawel/PycharmProjects/clear-air/src/components/MeasuringData.js"],"names":["React","useEffect","useState","axios","Line","ReferenceArea","LabelList","Bar","BarChart","AreaChart","Area","Tooltip","CartesianGrid","XAxis","YAxis","ReferenceLine","MeasuringData","stand","data","setData","quality","setQuality","arrData","arrQuality","tempArrData","Array","fill","get","id","then","res","slice","index_id","dataFacroty","arr","very_good","good","moderate","sufficient","bad","map","dataItem","item","i","value","barData","Object","assign","formatXAxis","tickItem","split","console","log","top","right","left","bottom","code","angle","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport {Line,ReferenceArea, LabelList,  Bar, BarChart, AreaChart, Area, Tooltip, CartesianGrid, XAxis, YAxis, ReferenceLine } from 'recharts';\n\nexport const MeasuringData = ({stand}) =>{\n\nconst [data, setData] = useState([])\nconst [quality, setQuality] = useState('')\nlet arrData = [];\nlet arrQuality = []\nlet tempArrData = Array(5).fill(1)\n\nuseEffect(() => {\n\n  axios.get(`/measuring-data/${stand.id}`)\n  .then((res) => {\n    setData(res.data.slice(14, 39));\n  })\n\n  axios.get(`/quality-index/${stand.index_id}`)\n  .then((res) => {\n    setQuality(res.data);\n  })\n}, [stand.id, stand.index_id]);\n\n  const dataFacroty = (arr) =>{\n    return {\n      very_good: arr[0],\n      good: arr[1],\n      moderate: arr[2],\n      sufficient: arr[3],\n      bad: arr[4]\n    }\n  }\n\n  if(quality !== ''){\n     arrQuality = [0, quality.very_good, quality.good, quality.moderate, quality.sufficient, quality.bad];\n    arrData = data.map((dataItem) => {\n       return(\n         dataFacroty(tempArrData.map((item, i) => {\n            if(dataItem.value >= arrQuality[i+1]){\n              return(arrQuality[i+1] - arrQuality[i])\n            } else if(dataItem.value  >= arrQuality[i] && dataItem.value  <= arrQuality[i+1]){\n              return(dataItem.value - arrQuality[i])\n            } else {\n              return 0;\n            }\n         })\n       )\n       )\n     });\n  }\n\n  const barData = (data.map((item, i) =>{\n    return(Object.assign(item, arrData[i]))\n  })\n)\n\n  const formatXAxis = (tickItem) => {\n    return tickItem.split('T', 2)[1];\n  }\n\n\n  console.log(data);\n\n  data.value = arrData\n\n  return(\n\n  <BarChart width={750} height={300} data={barData} className='chart-wrapper' margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n  }}>\n\n    <Tooltip />\n\n    <Bar stackId='pollution' dataKey=\"very_good\" fill=\"green\" />\n    <Bar stackId='pollution' dataKey=\"good\" fill=\"red\" />\n    <Bar stackId='pollution' dataKey=\"moderate\"  fill=\"red\" />\n    <Bar stackId='pollution' dataKey=\"sufficient\"  fill=\"red\" />\n    <Bar stackId='pollution' dataKey=\"bad\" fill=\"red\" />\n\n<Bar dataKey=\"pv\" fill=\"#8884d8\" stackId=\"stack\" />\n\n    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"1 1\" />\n    <XAxis height={100} dataKey=\"date\" interval={0} angle={30} label=\"Time[h]\" tickFormatter={formatXAxis}/>\n    <YAxis dataKey=\"value\" label={{ value: stand.code + '[ug/m3]', angle: -90 }} width={110}/>\n    <div>{quality.name}</div>\n  </BarChart>\n\n\n  )\n}\n"]},"metadata":{},"sourceType":"module"}