{"ast":null,"code":"var _jsxFileName = \"/home/pawel/PycharmProjects/clear-air/src/components/MeasuringData.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Line, ReferenceArea, LabelList, Bar, ComposedChart, AreaChart, Area, Tooltip, CartesianGrid, XAxis, YAxis, ReferenceLine } from 'recharts';\nexport const MeasuringData = ({\n  stand\n}) => {\n  const [data, setData] = useState([]);\n  const [quality, setQuality] = useState('');\n  useEffect(() => {\n    axios.get(`/measuring-data/${stand.id}`).then(res => {\n      setData(res.data.slice(14, 39));\n    });\n    axios.get(`/quality-index/${stand.index_id}`).then(res => {\n      setQuality(res.data);\n    });\n  }, []);\n\n  const formatXAxis = tickItem => {\n    return tickItem.split('T', 2)[1];\n  };\n\n  return /*#__PURE__*/React.createElement(ComposedChart, {\n    width: 750,\n    height: 300,\n    data: data,\n    className: \"chart-wrapper\",\n    margin: {\n      top: 10,\n      right: 20,\n      left: 10,\n      bottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    type: \"monotone\",\n    dataKey: \"value\",\n    stroke: \"#8884d8\",\n    fill: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(LabelList, {\n    dataKey: \"uv\",\n    position: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"value\",\n    stroke: \"#ff7300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"1 1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    height: 100,\n    dataKey: \"date\",\n    interval: 0,\n    angle: 30,\n    label: \"Time[h]\",\n    tickFormatter: formatXAxis,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ReferenceLine, {\n    y: quality.good,\n    label: \"good\",\n    stroke: \"#dba914\",\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(ReferenceLine, {\n    y: quality.moderate,\n    label: \"moderate\",\n    stroke: \"yellow\",\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(ReferenceLine, {\n    y: quality.sufficient,\n    label: \"sufficient\",\n    stroke: \"red\",\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(ReferenceLine, {\n    y: quality.sufficient,\n    label: \"bad\",\n    stroke: \"#7a0505\",\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(ReferenceArea, {\n    y1: 0,\n    y2: quality.very_good,\n    label: \"very good\",\n    fill: \"#d6f593\",\n    strokeOpacity: 0.3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 14\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"value\",\n    label: {\n      value: stand.code + '[ug/m3]',\n      angle: -90\n    },\n    width: 110,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, quality.name));\n};","map":{"version":3,"sources":["/home/pawel/PycharmProjects/clear-air/src/components/MeasuringData.js"],"names":["React","useEffect","useState","axios","Line","ReferenceArea","LabelList","Bar","ComposedChart","AreaChart","Area","Tooltip","CartesianGrid","XAxis","YAxis","ReferenceLine","MeasuringData","stand","data","setData","quality","setQuality","get","id","then","res","slice","index_id","formatXAxis","tickItem","split","top","right","left","bottom","good","moderate","sufficient","very_good","value","code","angle","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport {Line,ReferenceArea, LabelList,  Bar, ComposedChart, AreaChart, Area, Tooltip, CartesianGrid, XAxis, YAxis, ReferenceLine } from 'recharts';\n\nexport const MeasuringData = ({stand}) =>{\n\nconst [data, setData] = useState([])\nconst [quality, setQuality] = useState('')\n\n\nuseEffect(() => {\n\n  axios.get(`/measuring-data/${stand.id}`)\n  .then((res) => {\n    setData(res.data.slice(14, 39));\n  })\n\n  axios.get(`/quality-index/${stand.index_id}`)\n  .then((res) => {\n    setQuality(res.data);\n  })\n}, []);\n\n\n\nconst formatXAxis = (tickItem) => {\n  return tickItem.split('T', 2)[1];\n}\n\n  return(\n\n    <ComposedChart width={750} height={300} data={data} className='chart-wrapper' margin={{\n          top: 10, right: 20, left: 10, bottom: 0,\n        }}>\n\n      <Bar type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n      <LabelList dataKey=\"uv\" position=\"top\" />\n      <Line type=\"monotone\" dataKey=\"value\" stroke=\"#ff7300\" />\n      <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"1 1\" />\n      <XAxis height={100} dataKey=\"date\" interval={0} angle={30} label=\"Time[h]\" tickFormatter={formatXAxis}/>\n\n\n       <ReferenceLine y={quality.good} label=\"good\" stroke=\"#dba914\" strokeDasharray=\"3 3\" />\n       <ReferenceLine y={quality.moderate} label=\"moderate\" stroke=\"yellow\" strokeDasharray=\"3 3\" />\n       <ReferenceLine y={quality.sufficient} label=\"sufficient\" stroke=\"red\" strokeDasharray=\"3 3\" />\n       <ReferenceLine y={quality.sufficient} label=\"bad\" stroke=\"#7a0505\" strokeDasharray=\"3 3\" />\n\n             <ReferenceArea y1={0} y2={quality.very_good} label=\"very good\" fill=\"#d6f593\" strokeOpacity={0.3} />\n      <YAxis dataKey=\"value\" label={{ value: stand.code + '[ug/m3]', angle: -90 }} width={110}/>\n        <Tooltip />\n      <div>{quality.name}</div>\n  </ComposedChart>\n\n\n  )\n}\n"]},"metadata":{},"sourceType":"module"}