{"ast":null,"code":"var _jsxFileName = \"/home/pawel/PycharmProjects/clear-air/src/components/MeasuringData.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Line, ReferenceArea, LabelList, Bar, BarChart, AreaChart, Area, Tooltip, CartesianGrid, XAxis, YAxis, ReferenceLine } from 'recharts';\nexport const MeasuringData = ({\n  stand\n}) => {\n  const [data, setData] = useState([]);\n  const [quality, setQuality] = useState('');\n  let arrData = [];\n  let arrQuality = [];\n  let tempArrData = Array(5).fill(0);\n  useEffect(() => {\n    axios.get(`/measuring-data/${stand.id}`).then(res => {\n      setData(res.data.slice(14, 39));\n    });\n    axios.get(`/quality-index/${stand.index_id}`).then(res => {\n      setQuality(res.data);\n    });\n  }, [stand.id, stand.index_id]);\n\n  if (quality !== '') {\n    arrQuality = [0, quality.very_good, quality.good, quality.moderate, quality.sufficient, quality.bad];\n    arrData = data.map(dataItem => {\n      return tempArrData.map((item, i) => {\n        if (dataItem.value - arrQuality[i + 1] >= arrQuality[i + 1]) {\n          return arrQuality[i + 1] - arrQuality[i];\n        } else if (dataItem.value - arrQuality[i + 1] > 0) {\n          return dataItem.value - arrQuality[i];\n        } else {\n          return 0;\n        }\n      });\n    });\n  }\n\n  const formatXAxis = tickItem => {\n    return tickItem.split('T', 2)[1];\n  };\n\n  console.log({\n    quality,\n    arrData,\n    arrQuality\n  });\n  arrData.forEach((item, i) => {\n    if (data.value - quality[i + 1] >= item) {\n      arrData[i] = item;\n    } else if (data.value - item > 0) {\n      arrData[i] = item;\n    }\n  });\n  return /*#__PURE__*/React.createElement(BarChart, {\n    width: 750,\n    height: 300,\n    data: data,\n    className: \"chart-wrapper\",\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"value\",\n    fill: \"#8884d8\",\n    dataMax: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"value\",\n    fill: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"1 1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    height: 100,\n    dataKey: \"date\",\n    interval: 0,\n    angle: 30,\n    label: \"Time[h]\",\n    tickFormatter: formatXAxis,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ReferenceLine, {\n    y: quality.good,\n    label: \"good\",\n    stroke: \"#dba914\",\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(ReferenceLine, {\n    y: quality.moderate,\n    label: \"moderate\",\n    stroke: \"yellow\",\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(ReferenceLine, {\n    y: quality.sufficient,\n    label: \"sufficient\",\n    stroke: \"red\",\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(ReferenceLine, {\n    y: quality.sufficient,\n    label: \"bad\",\n    stroke: \"#7a0505\",\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(ReferenceArea, {\n    y1: 0,\n    y2: quality.very_good,\n    label: \"very good\",\n    fill: \"#d6f593\",\n    strokeOpacity: 0.3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 14\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: \"value\",\n    label: {\n      value: stand.code + '[ug/m3]',\n      angle: -90\n    },\n    width: 110,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, quality.name));\n};","map":{"version":3,"sources":["/home/pawel/PycharmProjects/clear-air/src/components/MeasuringData.js"],"names":["React","useEffect","useState","axios","Line","ReferenceArea","LabelList","Bar","BarChart","AreaChart","Area","Tooltip","CartesianGrid","XAxis","YAxis","ReferenceLine","MeasuringData","stand","data","setData","quality","setQuality","arrData","arrQuality","tempArrData","Array","fill","get","id","then","res","slice","index_id","very_good","good","moderate","sufficient","bad","map","dataItem","item","i","value","formatXAxis","tickItem","split","console","log","forEach","top","right","left","bottom","code","angle","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport {Line,ReferenceArea, LabelList,  Bar, BarChart, AreaChart, Area, Tooltip, CartesianGrid, XAxis, YAxis, ReferenceLine } from 'recharts';\n\nexport const MeasuringData = ({stand}) =>{\n\nconst [data, setData] = useState([])\nconst [quality, setQuality] = useState('')\nlet arrData = [];\nlet arrQuality = []\nlet tempArrData = Array(5).fill(0)\n\nuseEffect(() => {\n\n  axios.get(`/measuring-data/${stand.id}`)\n  .then((res) => {\n    setData(res.data.slice(14, 39));\n  })\n\n  axios.get(`/quality-index/${stand.index_id}`)\n  .then((res) => {\n    setQuality(res.data);\n  })\n}, [stand.id, stand.index_id]);\n\n  if(quality !== ''){\n     arrQuality = [0, quality.very_good, quality.good, quality.moderate, quality.sufficient, quality.bad];\n    arrData = data.map((dataItem) => {\n\n       return(\n         tempArrData.map((item, i) => {\n            if(dataItem.value - arrQuality[i+1] >= arrQuality[i+1]){\n              return(arrQuality[i+1] - arrQuality[i])\n            } else if(dataItem.value - arrQuality[i+1] > 0){\n              return(dataItem.value - arrQuality[i])\n            } else {\n              return 0;\n            }\n         })\n       )\n     });\n  }\n\n  const formatXAxis = (tickItem) => {\n    return tickItem.split('T', 2)[1];\n  }\n\n\n  console.log({quality, arrData, arrQuality});\n  arrData.forEach((item, i) => {\n    if(data.value - quality[i+1] >= item){\n      arrData[i] = item\n    }else if(data.value - item > 0){\n      arrData[i] = item\n    }\n  });\n\n  return(\n\n    <BarChart width={750} height={300} data={data} className='chart-wrapper' margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}>\n  <Tooltip />\n      <Bar stackId='pollution' dataKey=\"value\"  fill=\"#8884d8\" dataMax={3}  />\n      <Bar stackId='pollution' dataKey=\"value\"  fill=\"red\" />\n\n\n      <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"1 1\" />\n      <XAxis height={100} dataKey=\"date\" interval={0} angle={30} label=\"Time[h]\" tickFormatter={formatXAxis}/>\n\n\n       <ReferenceLine y={quality.good} label=\"good\" stroke=\"#dba914\" strokeDasharray=\"3 3\" />\n       <ReferenceLine y={quality.moderate} label=\"moderate\" stroke=\"yellow\" strokeDasharray=\"3 3\" />\n       <ReferenceLine y={quality.sufficient} label=\"sufficient\" stroke=\"red\" strokeDasharray=\"3 3\" />\n       <ReferenceLine y={quality.sufficient} label=\"bad\" stroke=\"#7a0505\" strokeDasharray=\"3 3\" />\n\n             <ReferenceArea y1={0} y2={quality.very_good} label=\"very good\" fill=\"#d6f593\" strokeOpacity={0.3} />\n      <YAxis dataKey=\"value\" label={{ value: stand.code + '[ug/m3]', angle: -90 }} width={110}/>\n\n      <div>{quality.name}</div>\n  </BarChart>\n\n\n  )\n}\n"]},"metadata":{},"sourceType":"module"}