{"ast":null,"code":"var _jsxFileName = \"/home/pawel/PycharmProjects/clear-air/src/components/MeasuringData.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Bar, BarChart, Tooltip, CartesianGrid, XAxis, YAxis } from 'recharts';\nimport handleErrors from './ErrorHendler';\nexport const MeasuringData = ({\n  stand\n}) => {\n  const [data, setData] = useState([]);\n  const [quality, setQuality] = useState('');\n  let arrData = [];\n  let arrQuality = [];\n  let tempArrData = Array(5).fill(1);\n  useEffect(() => {\n    axios.get(`/measuring-data/${stand.id}`).then(res => {\n      setData(res.data.reverse());\n    });\n    axios.get(`/quality-indicators/${stand.index_id}`).then(res => {\n      setQuality(res.data);\n    }).catch(handleErrors);\n  }, [stand.id, stand.index_id]);\n\n  const dataFacroty = arr => {\n    return {\n      very_good: arr[0],\n      good: arr[1],\n      moderate: arr[2],\n      sufficient: arr[3],\n      bad: arr[4],\n      very_bad: arr[5]\n    };\n  };\n\n  if (quality !== '') {\n    arrQuality = [0, quality.very_good, quality.good, quality.moderate, quality.sufficient, quality.bad];\n    arrData = data.map(dataItem => {\n      return dataFacroty(tempArrData.map((item, i) => {\n        if (dataItem.value >= arrQuality[i + 1]) {\n          return arrQuality[i + 1] - arrQuality[i];\n        } else if (dataItem.value >= arrQuality[i] && dataItem.value <= arrQuality[i + 1]) {\n          return dataItem.value - arrQuality[i];\n        } else {\n          return 0;\n        }\n      }));\n    });\n  }\n\n  const barData = data.map((item, i) => {\n    return Object.assign(item, arrData[i]);\n  });\n\n  const formatXAxis = tickItem => {\n    return '';\n  };\n\n  const CustomTooltip = ({\n    active,\n    payload,\n    label\n  }) => {\n    if (active) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"custom-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }\n      }, \"Value: \", payload[0].payload.value), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }\n      }, \"Time: \", payload[0].payload.date.slice(11, 16)), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }\n      }, \"Date: \", payload[0].payload.date.slice(0, 10)));\n    }\n\n    ;\n    return null;\n  };\n\n  return /*#__PURE__*/React.createElement(BarChart, {\n    width: 700,\n    height: 300,\n    data: barData,\n    className: \"chart-wrapper\",\n    margin: {\n      top: 5,\n      right: 5,\n      left: 5,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"1 1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    height: 50,\n    dataKey: \"date\",\n    tickFormatter: formatXAxis,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    width: 100,\n    dataKey: \"value\",\n    label: {\n      value: stand.code + '[ug/m3]',\n      angle: -90\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    content: /*#__PURE__*/React.createElement(CustomTooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 23\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"very_good\",\n    fill: \"#33FF57\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"good\",\n    fill: \"#DBFF33\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"moderate\",\n    fill: \"#FFBD33\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"sufficient\",\n    fill: \"#FF5733\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"bad\",\n    fill: \"#900C3F \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    stackId: \"pollution\",\n    dataKey: \"very_bad\",\n    fill: \"##581845  \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }));\n};","map":{"version":3,"sources":["/home/pawel/PycharmProjects/clear-air/src/components/MeasuringData.js"],"names":["React","useEffect","useState","axios","Bar","BarChart","Tooltip","CartesianGrid","XAxis","YAxis","handleErrors","MeasuringData","stand","data","setData","quality","setQuality","arrData","arrQuality","tempArrData","Array","fill","get","id","then","res","reverse","index_id","catch","dataFacroty","arr","very_good","good","moderate","sufficient","bad","very_bad","map","dataItem","item","i","value","barData","Object","assign","formatXAxis","tickItem","CustomTooltip","active","payload","label","date","slice","top","right","left","bottom","code","angle"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport {Bar, BarChart, Tooltip, CartesianGrid, XAxis, YAxis} from 'recharts';\nimport handleErrors from './ErrorHendler'\n\nexport const MeasuringData = ({stand}) =>{\n\nconst [data, setData] = useState([])\nconst [quality, setQuality] = useState('')\nlet arrData = [];\nlet arrQuality = []\nlet tempArrData = Array(5).fill(1)\n\nuseEffect(() => {\n\n  axios.get(`/measuring-data/${stand.id}`)\n  .then((res) => {\n    setData(res.data.reverse());\n  })\n\n  axios.get(`/quality-indicators/${stand.index_id}`)\n  .then((res) => {\n    setQuality(res.data);\n  }).catch(handleErrors)\n}, [stand.id, stand.index_id]);\n\n  const dataFacroty = (arr) =>{\n    return {\n      very_good: arr[0],\n      good: arr[1],\n      moderate: arr[2],\n      sufficient: arr[3],\n      bad: arr[4],\n      very_bad: arr[5]\n    }\n  }\n\n  if(quality !== ''){\n     arrQuality = [0, quality.very_good, quality.good, quality.moderate, quality.sufficient, quality.bad];\n    arrData = data.map((dataItem) => {\n       return(\n         dataFacroty(tempArrData.map((item, i) => {\n            if(dataItem.value >= arrQuality[i+1]){\n              return(arrQuality[i+1] - arrQuality[i])\n            } else if(dataItem.value  >= arrQuality[i] && dataItem.value  <= arrQuality[i+1]){\n              return(dataItem.value - arrQuality[i])\n            } else {\n              return 0;\n            }\n         })\n       )\n       )\n     });\n  }\n\n  const barData = (data.map((item, i) =>{\n    return(Object.assign(item, arrData[i]))\n  })\n)\n\n  const formatXAxis = (tickItem) => {\n    return '';\n  }\n\n  const CustomTooltip = ({ active, payload, label })=>{\n    if(active){\n      return(\n      <div className='custom-tooltip'>\n      <p>Value: {payload[0].payload.value}</p>\n      <p>Time: {payload[0].payload.date.slice(11, 16)}</p>\n      <p>Date: {payload[0].payload.date.slice(0, 10)}</p>\n\n      </div>\n    )\n  };\n  return null;\n  }\n\n  return(\n\n  <BarChart width={700} height={300} data={barData} className='chart-wrapper' margin={{\n          top: 5, right: 5, left: 5, bottom: 5,\n  }}>\n  <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"1 1\" />\n  <XAxis height={50} dataKey=\"date\"   tickFormatter={formatXAxis}/>\n  <YAxis width={100} dataKey=\"value\" label={{ value: stand.code + '[ug/m3]', angle: -90 }} />\n\n    <Tooltip content={<CustomTooltip />} />\n\n    <Bar stackId='pollution' dataKey=\"very_good\" fill='#33FF57' />\n    <Bar stackId='pollution' dataKey=\"good\" fill=\"#DBFF33\" />\n    <Bar stackId='pollution' dataKey=\"moderate\"  fill=\"#FFBD33\" />\n    <Bar stackId='pollution' dataKey=\"sufficient\"  fill=\"#FF5733\" />\n    <Bar stackId='pollution' dataKey=\"bad\" fill=\"#900C3F \" />\n    <Bar stackId='pollution' dataKey=\"very_bad\" fill=\"##581845  \" />\n  </BarChart>\n\n\n  )\n}\n"]},"metadata":{},"sourceType":"module"}